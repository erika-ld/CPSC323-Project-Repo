
Token: Separator      Lexeme: $ 
<Rat24S> ::= $ <Opt Function Definitions> $ <Opt Declaration List> $ <Statement List> $

Token: Keyword      Lexeme: function 
<Opt Function Definitions> ::= <Function Definitions> | <Empty>

Token: Keyword      Lexeme: function 
<Function Definition> ::= <Function> <Function Definition Prime>

Token: Keyword      Lexeme: function 
<Function> ::= function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>

Token: Identifier      Lexeme: fahr 
<Opt Parameter List> ::= <Parameter List> | <Empty>

Token: Identifier      Lexeme: fahr 
<Parameter List> ::= <Parameter> <Parameter List Prime>

Token: Identifier      Lexeme: fahr 
<Parameter> ::= <IDs> <Qualifier>

Token: Identifier      Lexeme: fahr 
<IDS> ::= <Identifier> <IDs Prime>

Token: Identifier      Lexeme: fahr 
<IDs Prime> ::= , <IDs> | <Empty>

Token: Identifier      Lexeme: fahr 
<Empty> ::= ε

Token: Keyword      Lexeme: integer 
<Qualifier> ::= integer | boolean | real

Token: Keyword      Lexeme: integer 
<Parameter List Prime> ::= <Parameter List> | <Empty>

Token: Keyword      Lexeme: integer 
<Empty> ::= ε

Token: Separator      Lexeme: { 
<Opt Declaration List> ::= <Declaration List> | <Empty>

Token: Separator      Lexeme: { 
<Empty> ::= ε

Token: Separator      Lexeme: { 
<Body> ::= { <Statement List> }

Token: Keyword      Lexeme: return 
<Statement List> ::= <Statement> <Statement List Prime>

Token: Keyword      Lexeme: return 
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>

Token: Keyword      Lexeme: return 
<Return> ::= return <Return Prime>

Token: Integer      Lexeme: 5 
<Return Prime> ::= <Expression>; | <Empty>;

Token: Integer      Lexeme: 5 
<Expression> ::= <Term> <Expression_Prime>

Token: Integer      Lexeme: 5 
<Term> ::= <Factor> <Term Prime>

Token: Integer      Lexeme: 5 
<Factor> ::= - <Primary> | <Primary>

Token: Integer      Lexeme: 5 
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false

Token: Integer      Lexeme: 5 
<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>

Token: Separator      Lexeme: ( 
<Factor> ::= - <Primary> | <Primary>

Token: Separator      Lexeme: ( 
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false

Token: Identifier      Lexeme: fahr 
<Expression> ::= <Term> <Expression_Prime>

Token: Identifier      Lexeme: fahr 
<Term> ::= <Factor> <Term Prime>

Token: Identifier      Lexeme: fahr 
<Factor> ::= - <Primary> | <Primary>

Token: Identifier      Lexeme: fahr 
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false

Token: Identifier      Lexeme: fahr 
<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>

Token: Identifier      Lexeme: fahr 
<Empty> ::= ε

Token: Identifier      Lexeme: fahr 
<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>

Token: Integer      Lexeme: 32 
<Term> ::= <Factor> <Term Prime>

Token: Integer      Lexeme: 32 
<Factor> ::= - <Primary> | <Primary>

Token: Integer      Lexeme: 32 
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false

Token: Integer      Lexeme: 32 
<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>

Token: Integer      Lexeme: 32 
<Empty> ::= ε

Token: Integer      Lexeme: 32 
<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>

Token: Integer      Lexeme: 32 
<Empty> ::= ε

Token: Separator      Lexeme: ) 
<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>

Token: Integer      Lexeme: 9 
<Factor> ::= - <Primary> | <Primary>

Token: Integer      Lexeme: 9 
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false

Token: Integer      Lexeme: 9 
<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>

Token: Integer      Lexeme: 9 
<Empty> ::= ε

Token: Integer      Lexeme: 9 
<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>

Token: Integer      Lexeme: 9 
<Empty> ::= ε

Token: Separator      Lexeme: ; 
<Statement List Prime> ::= <Statement List> | <Empty>

Token: Separator      Lexeme: ; 
<Empty> ::= ε

Token: Separator      Lexeme: } 
<Function Definition Prime> ::= <Function Definition> | <Empty>

Token: Keyword      Lexeme: function 
<Opt Function Definitions> ::= <Function Definitions> | <Empty>

Token: Keyword      Lexeme: function 
<Function Definition> ::= <Function> <Function Definition Prime>

Token: Keyword      Lexeme: function 
<Function> ::= function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>

Token: Identifier      Lexeme: x 
<Opt Parameter List> ::= <Parameter List> | <Empty>

Token: Identifier      Lexeme: x 
<Parameter List> ::= <Parameter> <Parameter List Prime>

Token: Identifier      Lexeme: x 
<Parameter> ::= <IDs> <Qualifier>

Token: Identifier      Lexeme: x 
<IDS> ::= <Identifier> <IDs Prime>

Token: Identifier      Lexeme: x 
<IDs Prime> ::= , <IDs> | <Empty>

Token: Identifier      Lexeme: x 
<Empty> ::= ε

Token: Keyword      Lexeme: real 
<Qualifier> ::= integer | boolean | real

Token: Keyword      Lexeme: real 
<Parameter List Prime> ::= <Parameter List> | <Empty>

Token: Identifier      Lexeme: y 
<Parameter List> ::= <Parameter> <Parameter List Prime>

Token: Identifier      Lexeme: y 
<Parameter> ::= <IDs> <Qualifier>

Token: Identifier      Lexeme: y 
<IDS> ::= <Identifier> <IDs Prime>

Token: Identifier      Lexeme: y 
<IDs Prime> ::= , <IDs> | <Empty>

Token: Identifier      Lexeme: y 
<Empty> ::= ε

Token: Keyword      Lexeme: boolean 
<Qualifier> ::= integer | boolean | real

Token: Keyword      Lexeme: boolean 
<Parameter List Prime> ::= <Parameter List> | <Empty>

Token: Keyword      Lexeme: boolean 
<Empty> ::= ε

Token: Keyword      Lexeme: boolean 
<Opt Declaration List> ::= <Declaration List> | <Empty>

Token: Keyword      Lexeme: boolean 
<Declaration> ; <Declaration List Prime>

Token: Keyword      Lexeme: boolean 
<Declaration> ::= <Qualifier> <IDs>

Token: Keyword      Lexeme: boolean 
<Qualifier> ::= integer | boolean | real

Token: Identifier      Lexeme: k 
<IDS> ::= <Identifier> <IDs Prime>

Token: Separator      Lexeme: , 
<IDs Prime> ::= , <IDs> | <Empty>

Token: Identifier      Lexeme: z 
<IDS> ::= <Identifier> <IDs Prime>

Token: Identifier      Lexeme: z 
<IDs Prime> ::= , <IDs> | <Empty>

Token: Identifier      Lexeme: z 
<Empty> ::= ε

Token: Keyword      Lexeme: real 
<Declaration List Prime> ::= <Declaration List> | <Empty>

Token: Keyword      Lexeme: real 
<Declaration> ; <Declaration List Prime>

Token: Keyword      Lexeme: real 
<Declaration> ::= <Qualifier> <IDs>

Token: Keyword      Lexeme: real 
<Qualifier> ::= integer | boolean | real

Token: Identifier      Lexeme: x 
<IDS> ::= <Identifier> <IDs Prime>

Token: Identifier      Lexeme: x 
<IDs Prime> ::= , <IDs> | <Empty>

Token: Identifier      Lexeme: x 
<Empty> ::= ε

Token: Separator      Lexeme: { 
<Declaration List Prime> ::= <Declaration List> | <Empty>

Token: Separator      Lexeme: { 
<Empty> ::= ε

Token: Separator      Lexeme: { 
<Body> ::= { <Statement List> }

Token: Keyword      Lexeme: if 
<Statement List> ::= <Statement> <Statement List Prime>

Token: Keyword      Lexeme: if 
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>

Token: Keyword      Lexeme: if 
<If> ::= if ( <Condition> ) <Statement> <If Prime>

Token: Identifier      Lexeme: x 
<Condition> ::= <Expression> <Relop> <Expression>

Token: Identifier      Lexeme: x 
<Expression> ::= <Term> <Expression_Prime>

Token: Identifier      Lexeme: x 
<Term> ::= <Factor> <Term Prime>

Token: Identifier      Lexeme: x 
<Factor> ::= - <Primary> | <Primary>

Token: Identifier      Lexeme: x 
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false

Token: Identifier      Lexeme: x 
<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>

Token: Identifier      Lexeme: x 
<Empty> ::= ε

Token: Identifier      Lexeme: x 
<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>

Token: Identifier      Lexeme: x 
<Empty> ::= ε

Token: Operator      Lexeme: > 
<Relop> ::= == | != | > | < | <= | =>

Token: Identifier      Lexeme: y 
<Expression> ::= <Term> <Expression_Prime>

Token: Identifier      Lexeme: y 
<Term> ::= <Factor> <Term Prime>

Token: Identifier      Lexeme: y 
<Factor> ::= - <Primary> | <Primary>

Token: Identifier      Lexeme: y 
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false

Token: Identifier      Lexeme: y 
<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>

Token: Identifier      Lexeme: y 
<Empty> ::= ε

Token: Identifier      Lexeme: y 
<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>

Token: Identifier      Lexeme: y 
<Empty> ::= ε

Token: Identifier      Lexeme: x 
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>

Token: Identifier      Lexeme: x 
<Assign> ::= <Identifier> = <Expression> ;

Token: Keyword      Lexeme: false 
<Expression> ::= <Term> <Expression_Prime>

Token: Keyword      Lexeme: false 
<Term> ::= <Factor> <Term Prime>

Token: Keyword      Lexeme: false 
<Factor> ::= - <Primary> | <Primary>

Token: Keyword      Lexeme: false 
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false

Token: Keyword      Lexeme: false 
<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>

Token: Keyword      Lexeme: false 
<Empty> ::= ε

Token: Keyword      Lexeme: false 
<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>

Token: Keyword      Lexeme: false 
<Empty> ::= ε

Token: Keyword      Lexeme: endif 
<If Prime> ::= else <Statement> endif | endif

Token: Keyword      Lexeme: if 
<Statement List Prime> ::= <Statement List> | <Empty>

Token: Keyword      Lexeme: if 
<Statement List> ::= <Statement> <Statement List Prime>

Token: Keyword      Lexeme: if 
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>

Token: Keyword      Lexeme: if 
<If> ::= if ( <Condition> ) <Statement> <If Prime>

Token: Identifier      Lexeme: y 
<Condition> ::= <Expression> <Relop> <Expression>

Token: Identifier      Lexeme: y 
<Expression> ::= <Term> <Expression_Prime>

Token: Identifier      Lexeme: y 
<Term> ::= <Factor> <Term Prime>

Token: Identifier      Lexeme: y 
<Factor> ::= - <Primary> | <Primary>

Token: Identifier      Lexeme: y 
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false

Token: Identifier      Lexeme: y 
<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>

Token: Identifier      Lexeme: y 
<Empty> ::= ε

Token: Identifier      Lexeme: y 
<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>

Token: Identifier      Lexeme: y 
<Empty> ::= ε

Token: Operator      Lexeme: != 
<Relop> ::= == | != | > | < | <= | =>

Token: Identifier      Lexeme: z 
<Expression> ::= <Term> <Expression_Prime>

Token: Identifier      Lexeme: z 
<Term> ::= <Factor> <Term Prime>

Token: Identifier      Lexeme: z 
<Factor> ::= - <Primary> | <Primary>

Token: Identifier      Lexeme: z 
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false

Token: Identifier      Lexeme: z 
<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>

Token: Identifier      Lexeme: z 
<Empty> ::= ε

Token: Identifier      Lexeme: z 
<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>

Token: Identifier      Lexeme: z 
<Empty> ::= ε

Token: Identifier      Lexeme: x 
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>

Token: Identifier      Lexeme: x 
<Assign> ::= <Identifier> = <Expression> ;

Token: Keyword      Lexeme: true 
<Expression> ::= <Term> <Expression_Prime>

Token: Keyword      Lexeme: true 
<Term> ::= <Factor> <Term Prime>

Token: Keyword      Lexeme: true 
<Factor> ::= - <Primary> | <Primary>

Token: Keyword      Lexeme: true 
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false

Token: Keyword      Lexeme: true 
<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>

Token: Keyword      Lexeme: true 
<Empty> ::= ε

Token: Keyword      Lexeme: true 
<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>

Token: Keyword      Lexeme: true 
<Empty> ::= ε

Token: Keyword      Lexeme: else 
<If Prime> ::= else <Statement> endif | endif

Token: Identifier      Lexeme: y 
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>

Token: Identifier      Lexeme: y 
<Assign> ::= <Identifier> = <Expression> ;

Token: Real      Lexeme: 123.45 
<Expression> ::= <Term> <Expression_Prime>

Token: Real      Lexeme: 123.45 
<Term> ::= <Factor> <Term Prime>

Token: Real      Lexeme: 123.45 
<Factor> ::= - <Primary> | <Primary>

Token: Real      Lexeme: 123.45 
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false

Token: Real      Lexeme: 123.45 
<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>

Token: Real      Lexeme: 123.45 
<Empty> ::= ε

Token: Real      Lexeme: 123.45 
<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>

Token: Real      Lexeme: 123.45 
<Empty> ::= ε

Token: Keyword      Lexeme: return 
<Statement List Prime> ::= <Statement List> | <Empty>

Token: Keyword      Lexeme: return 
<Statement List> ::= <Statement> <Statement List Prime>

Token: Keyword      Lexeme: return 
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>

Token: Keyword      Lexeme: return 
<Return> ::= return <Return Prime>

Token: Separator      Lexeme: ; 
<Return Prime> ::= <Expression>; | <Empty>;

Token: Separator      Lexeme: ; 
<Empty> ::= ε

Token: Separator      Lexeme: ; 
<Statement List Prime> ::= <Statement List> | <Empty>

Token: Separator      Lexeme: ; 
<Empty> ::= ε

Token: Separator      Lexeme: } 
<Function Definition Prime> ::= <Function Definition> | <Empty>

Token: Keyword      Lexeme: integer 
<Opt Declaration List> ::= <Declaration List> | <Empty>

Token: Keyword      Lexeme: integer 
<Declaration> ; <Declaration List Prime>

Token: Keyword      Lexeme: integer 
<Declaration> ::= <Qualifier> <IDs>

Token: Keyword      Lexeme: integer 
<Qualifier> ::= integer | boolean | real

Token: Identifier      Lexeme: low 
<IDS> ::= <Identifier> <IDs Prime>

Token: Separator      Lexeme: , 
<IDs Prime> ::= , <IDs> | <Empty>

Token: Identifier      Lexeme: high 
<IDS> ::= <Identifier> <IDs Prime>

Token: Separator      Lexeme: , 
<IDs Prime> ::= , <IDs> | <Empty>

Token: Identifier      Lexeme: step 
<IDS> ::= <Identifier> <IDs Prime>

Token: Identifier      Lexeme: step 
<IDs Prime> ::= , <IDs> | <Empty>

Token: Identifier      Lexeme: step 
<Empty> ::= ε

Token: Separator      Lexeme: $ 
<Declaration List Prime> ::= <Declaration List> | <Empty>

Token: Separator      Lexeme: $ 
<Empty> ::= ε

Token: Keyword      Lexeme: scan 
<Statement List> ::= <Statement> <Statement List Prime>

Token: Keyword      Lexeme: scan 
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>

Token: Keyword      Lexeme: scan 
<Scan> ::= scan ( <IDs> );

Token: Identifier      Lexeme: low 
<IDS> ::= <Identifier> <IDs Prime>

Token: Separator      Lexeme: , 
<IDs Prime> ::= , <IDs> | <Empty>

Token: Identifier      Lexeme: high 
<IDS> ::= <Identifier> <IDs Prime>

Token: Separator      Lexeme: , 
<IDs Prime> ::= , <IDs> | <Empty>

Token: Identifier      Lexeme: step 
<IDS> ::= <Identifier> <IDs Prime>

Token: Identifier      Lexeme: step 
<IDs Prime> ::= , <IDs> | <Empty>

Token: Identifier      Lexeme: step 
<Empty> ::= ε

Token: Separator      Lexeme: ; 
<Statement List Prime> ::= <Statement List> | <Empty>

Token: Keyword      Lexeme: while 
<Statement List> ::= <Statement> <Statement List Prime>

Token: Keyword      Lexeme: while 
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>

Token: Keyword      Lexeme: while 
<While> ::= while ( <Condition> ) <Statement> endwhile

Token: Identifier      Lexeme: low 
<Condition> ::= <Expression> <Relop> <Expression>

Token: Identifier      Lexeme: low 
<Expression> ::= <Term> <Expression_Prime>

Token: Identifier      Lexeme: low 
<Term> ::= <Factor> <Term Prime>

Token: Identifier      Lexeme: low 
<Factor> ::= - <Primary> | <Primary>

Token: Identifier      Lexeme: low 
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false

Token: Identifier      Lexeme: low 
<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>

Token: Identifier      Lexeme: low 
<Empty> ::= ε

Token: Identifier      Lexeme: low 
<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>

Token: Identifier      Lexeme: low 
<Empty> ::= ε

Token: Operator      Lexeme: <= 
<Relop> ::= == | != | > | < | <= | =>

Token: Identifier      Lexeme: high 
<Expression> ::= <Term> <Expression_Prime>

Token: Identifier      Lexeme: high 
<Term> ::= <Factor> <Term Prime>

Token: Identifier      Lexeme: high 
<Factor> ::= - <Primary> | <Primary>

Token: Identifier      Lexeme: high 
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false

Token: Identifier      Lexeme: high 
<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>

Token: Identifier      Lexeme: high 
<Empty> ::= ε

Token: Identifier      Lexeme: high 
<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>

Token: Identifier      Lexeme: high 
<Empty> ::= ε

Token: Separator      Lexeme: { 
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>

Token: Separator      Lexeme: { 
<Compound> ::= { <Statement List> }

Token: Keyword      Lexeme: print 
<Statement List> ::= <Statement> <Statement List Prime>

Token: Keyword      Lexeme: print 
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>

Token: Keyword      Lexeme: print 
<Print> ::= print ( <Expression> );

Token: Identifier      Lexeme: convertx 
<Expression> ::= <Term> <Expression_Prime>

Token: Identifier      Lexeme: convertx 
<Term> ::= <Factor> <Term Prime>

Token: Identifier      Lexeme: convertx 
<Factor> ::= - <Primary> | <Primary>

Token: Identifier      Lexeme: convertx 
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false

Token: Identifier      Lexeme: low 
<IDS> ::= <Identifier> <IDs Prime>

Token: Identifier      Lexeme: low 
<IDs Prime> ::= , <IDs> | <Empty>

Token: Identifier      Lexeme: low 
<Empty> ::= ε

Token: Separator      Lexeme: ) 
<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>

Token: Separator      Lexeme: ) 
<Empty> ::= ε

Token: Separator      Lexeme: ) 
<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>

Token: Separator      Lexeme: ) 
<Empty> ::= ε

Token: Separator      Lexeme: ; 
<Statement List Prime> ::= <Statement List> | <Empty>

Token: Identifier      Lexeme: low 
<Statement List> ::= <Statement> <Statement List Prime>

Token: Identifier      Lexeme: low 
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>

Token: Identifier      Lexeme: low 
<Assign> ::= <Identifier> = <Expression> ;

Token: Identifier      Lexeme: low 
<Expression> ::= <Term> <Expression_Prime>

Token: Identifier      Lexeme: low 
<Term> ::= <Factor> <Term Prime>

Token: Identifier      Lexeme: low 
<Factor> ::= - <Primary> | <Primary>

Token: Identifier      Lexeme: low 
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false

Token: Identifier      Lexeme: low 
<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>

Token: Identifier      Lexeme: low 
<Empty> ::= ε

Token: Identifier      Lexeme: low 
<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>

Token: Identifier      Lexeme: step 
<Term> ::= <Factor> <Term Prime>

Token: Identifier      Lexeme: step 
<Factor> ::= - <Primary> | <Primary>

Token: Identifier      Lexeme: step 
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false

Token: Identifier      Lexeme: step 
<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>

Token: Identifier      Lexeme: step 
<Empty> ::= ε

Token: Identifier      Lexeme: step 
<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>

Token: Identifier      Lexeme: step 
<Empty> ::= ε

Token: Separator      Lexeme: ; 
<Statement List Prime> ::= <Statement List> | <Empty>

Token: Separator      Lexeme: ; 
<Empty> ::= ε

Token: Keyword      Lexeme: endwhile 
<Statement List Prime> ::= <Statement List> | <Empty>

Token: Keyword      Lexeme: endwhile 
<Empty> ::= ε
